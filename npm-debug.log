0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'memwatch' ]
2 info using npm@1.4.9
3 info using node@v0.11.13
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 warn package.json appTFG@0.0.1 No description
6 warn package.json appTFG@0.0.1 No repository field.
7 warn package.json appTFG@0.0.1 No README data
8 verbose readDependencies using package.json deps
9 verbose cache add [ 'memwatch', null ]
10 verbose cache add name=undefined spec="memwatch" args=["memwatch",null]
11 verbose parsed url { protocol: null,
11 verbose parsed url   slashes: null,
11 verbose parsed url   auth: null,
11 verbose parsed url   host: null,
11 verbose parsed url   port: null,
11 verbose parsed url   hostname: null,
11 verbose parsed url   hash: null,
11 verbose parsed url   search: null,
11 verbose parsed url   query: null,
11 verbose parsed url   pathname: 'memwatch',
11 verbose parsed url   path: 'memwatch',
11 verbose parsed url   href: 'memwatch' }
12 silly lockFile 6099d716-memwatch memwatch
13 verbose lock memwatch C:\Users\Lenovopc\AppData\Roaming\npm-cache\6099d716-memwatch.lock
14 silly lockFile 6099d716-memwatch memwatch
15 silly lockFile 6099d716-memwatch memwatch
16 verbose addNamed [ 'memwatch', '' ]
17 verbose addNamed [ null, '*' ]
18 silly lockFile 0703982f-memwatch memwatch@
19 verbose lock memwatch@ C:\Users\Lenovopc\AppData\Roaming\npm-cache\0703982f-memwatch.lock
20 silly addNameRange { name: 'memwatch', range: '*', hasData: false }
21 verbose url raw memwatch
22 verbose url resolving [ 'https://registry.npmjs.org/', './memwatch' ]
23 verbose url resolved https://registry.npmjs.org/memwatch
24 info trying registry request attempt 1 at 12:14:12
25 verbose etag "JMGVF22LH9X0OVRBEZZQ8P3C"
26 http GET https://registry.npmjs.org/memwatch
27 http 304 https://registry.npmjs.org/memwatch
28 silly registry.get cb [ 304,
28 silly registry.get   { date: 'Sun, 23 Aug 2015 11:14:10 GMT',
28 silly registry.get     via: '1.1 varnish',
28 silly registry.get     'cache-control': 'max-age=60',
28 silly registry.get     etag: '"JMGVF22LH9X0OVRBEZZQ8P3C"',
28 silly registry.get     age: '0',
28 silly registry.get     connection: 'close',
28 silly registry.get     'x-served-by': 'cache-fra1225-FRA',
28 silly registry.get     'x-cache': 'MISS',
28 silly registry.get     'x-cache-hits': '0',
28 silly registry.get     'x-timer': 'S1440328450.609240,VS0,VE530',
28 silly registry.get     vary: 'Accept' } ]
29 verbose etag memwatch from cache
30 silly addNameRange number 2 { name: 'memwatch', range: '*', hasData: true }
31 silly addNameRange versions [ 'memwatch',
31 silly addNameRange   [ '0.1.0',
31 silly addNameRange     '0.1.1',
31 silly addNameRange     '0.1.2',
31 silly addNameRange     '0.1.3',
31 silly addNameRange     '0.1.4',
31 silly addNameRange     '0.1.5',
31 silly addNameRange     '0.2.0',
31 silly addNameRange     '0.2.1',
31 silly addNameRange     '0.2.2' ] ]
32 verbose addNamed [ 'memwatch', '0.2.2' ]
33 verbose addNamed [ '0.2.2', '0.2.2' ]
34 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
35 verbose lock memwatch@0.2.2 C:\Users\Lenovopc\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
36 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
37 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
38 silly lockFile 0703982f-memwatch memwatch@
39 silly lockFile 0703982f-memwatch memwatch@
40 silly resolved [ { name: 'memwatch',
40 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
40 silly resolved     version: '0.2.2',
40 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
40 silly resolved     engines: { node: '>= 0.6.0' },
40 silly resolved     repository:
40 silly resolved      { type: 'git',
40 silly resolved        url: 'git+https://github.com/lloyd/node-memwatch.git' },
40 silly resolved     main: 'include.js',
40 silly resolved     licenses: [ [Object] ],
40 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
40 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
40 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
40 silly resolved     contributors: [ [Object], [Object], [Object] ],
40 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
40 silly resolved     readmeFilename: 'README.md',
40 silly resolved     _id: 'memwatch@0.2.2',
40 silly resolved     dist:
40 silly resolved      { shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
40 silly resolved        tarball: 'http://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz' },
40 silly resolved     _from: 'memwatch@',
40 silly resolved     _npmVersion: '1.2.14',
40 silly resolved     _npmUser: { name: 'lloyd', email: 'lloyd@hilaiel.com' },
40 silly resolved     maintainers: [ [Object] ],
40 silly resolved     directories: {},
40 silly resolved     _shasum: '779e8cd982532b6221b6ed1c1269098bee16f92c',
40 silly resolved     _resolved: 'https://registry.npmjs.org/memwatch/-/memwatch-0.2.2.tgz',
40 silly resolved     gypfile: true,
40 silly resolved     homepage: 'https://github.com/lloyd/node-memwatch#readme' } ]
41 info install memwatch@0.2.2 into C:\Users\Lenovopc\Desktop\TFG\appTFG
42 info installOne memwatch@0.2.2
43 info C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch unbuild
44 verbose tar unpack c:\Users\Lenovopc\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
45 silly lockFile f027e0cb-TFG-appTFG-node-modules-memwatch tar://C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch
46 verbose lock tar://C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch C:\Users\Lenovopc\AppData\Roaming\npm-cache\f027e0cb-TFG-appTFG-node-modules-memwatch.lock
47 silly lockFile 14fb739a-cache-memwatch-0-2-2-package-tgz tar://c:\Users\Lenovopc\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
48 verbose lock tar://c:\Users\Lenovopc\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz C:\Users\Lenovopc\AppData\Roaming\npm-cache\14fb739a-cache-memwatch-0-2-2-package-tgz.lock
49 silly gunzTarPerm modes [ '755', '644' ]
50 silly gunzTarPerm extractEntry package.json
51 silly gunzTarPerm extractEntry .npmignore
52 silly gunzTarPerm extractEntry README.md
53 silly gunzTarPerm extractEntry tests.js
54 silly gunzTarPerm extractEntry foo.js
55 silly gunzTarPerm extractEntry include.js
56 silly gunzTarPerm extractEntry .travis.yml
57 silly gunzTarPerm extractEntry ChangeLog
58 silly gunzTarPerm extractEntry #wscript#
59 silly gunzTarPerm extractEntry binding.gyp
60 silly gunzTarPerm extractEntry src/heapdiff.cc
61 silly gunzTarPerm extractEntry src/heapdiff.hh
62 silly gunzTarPerm extractEntry src/init.cc
63 silly gunzTarPerm extractEntry src/memwatch.cc
64 silly gunzTarPerm extractEntry src/memwatch.hh
65 silly gunzTarPerm extractEntry src/platformcompat.hh
66 silly gunzTarPerm extractEntry src/util.cc
67 silly gunzTarPerm extractEntry src/util.hh
68 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
69 silly gunzTarPerm extractEntry examples/do_nothing_server.js
70 silly gunzTarPerm extractEntry examples/slightly_leaky.js
71 silly lockFile f027e0cb-TFG-appTFG-node-modules-memwatch tar://C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch
72 silly lockFile f027e0cb-TFG-appTFG-node-modules-memwatch tar://C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch
73 silly lockFile 14fb739a-cache-memwatch-0-2-2-package-tgz tar://c:\Users\Lenovopc\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
74 silly lockFile 14fb739a-cache-memwatch-0-2-2-package-tgz tar://c:\Users\Lenovopc\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
75 info preinstall memwatch@0.2.2
76 verbose readDependencies using package.json deps
77 verbose readDependencies using package.json deps
78 silly resolved []
79 verbose about to build C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch
80 info build C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch
81 verbose linkStuff [ false,
81 verbose linkStuff   false,
81 verbose linkStuff   false,
81 verbose linkStuff   'C:\\Users\\Lenovopc\\Desktop\\TFG\\appTFG\\node_modules' ]
82 info linkStuff memwatch@0.2.2
83 verbose linkBins memwatch@0.2.2
84 verbose linkMans memwatch@0.2.2
85 verbose rebuildBundles memwatch@0.2.2
86 info install memwatch@0.2.2
87 verbose unsafe-perm in lifecycle true
88 info memwatch@0.2.2 Failed to exec install script
89 info C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules\memwatch unbuild
90 info preuninstall memwatch@0.2.2
91 info uninstall memwatch@0.2.2
92 verbose true,C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules,C:\Users\Lenovopc\Desktop\TFG\appTFG\node_modules unbuild memwatch@0.2.2
93 info postuninstall memwatch@0.2.2
94 error memwatch@0.2.2 install: `node-gyp rebuild`
94 error Exit status 1
95 error Failed at the memwatch@0.2.2 install script.
95 error This is most likely a problem with the memwatch package,
95 error not with npm itself.
95 error Tell the author that this fails on your system:
95 error     node-gyp rebuild
95 error You can get their info via:
95 error     npm owner ls memwatch
95 error There is likely additional logging output above.
96 error System Windows_NT 6.2.9200
97 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "memwatch"
98 error cwd C:\Users\Lenovopc\Desktop\TFG\appTFG
99 error node -v v0.11.13
100 error npm -v 1.4.9
101 error code ELIFECYCLE
102 verbose exit [ 1, true ]
